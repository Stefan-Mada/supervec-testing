Source file:

#include <immintrin.h>

int function(__m256i vec)
{	
	int64_t* arr = (int64_t*)&vec;
	int sum = 0;
	for(int i = 0; i < 4; ++i)
		sum += arr[i];
	return sum;
}

Compiled using:
clang++ -I -march=native -mavx2 -O3 -Werror -S -emit-llvm function.cpp -o function.ll

Called supervec using:
$HOME/llvm/build/bin/opt -enable-new-pm=0 -load $HOME/minotaur/build/minotaur.so -so -S function.ll

Sketches output:
---------Sketches------------
(copy reservedconst)
-----------------------------

----------------------------------------
define i32 @_Z8functionDv4_x.397.398(<4 x i64> %0, i32 %_reservedc_0) noread nowrite nofree {
%1:
  %2 = bitcast <4 x i64> %0 to <8 x i32>
  %3 = extractelement <8 x i32> %2, i32 0
  %4 = extractelement <4 x i64> %0, i32 1
  %5 = trunc i64 %4 to i32
  %6 = add i32 %3, %5
  %7 = extractelement <4 x i64> %0, i32 2
  %8 = trunc i64 %7 to i32
  %9 = add i32 %6, %8
  %10 = extractelement <4 x i64> %0, i32 3
  %11 = trunc i64 %10 to i32
  %12 = add i32 %9, %11
  ret i32 %12
}
=>
define i32 @_Z8functionDv4_x.397(<4 x i64> %0, i32 %_reservedc_0) noread nowrite nofree {
%1:
  %2 = bitcast <4 x i64> %0 to <8 x i32>
  %3 = extractelement <8 x i32> %2, i32 0
  %4 = add i32 %3, %_reservedc_0
  %5 = extractelement <4 x i64> %0, i32 2
  %6 = trunc i64 %5 to i32
  %7 = add i32 %4, %6
  %8 = extractelement <4 x i64> %0, i32 3
  %9 = trunc i64 %8 to i32
  %10 = add i32 %7, %9
  ret i32 %10
}
---------Sketches------------
(copy reservedconst)
-----------------------------

----------------------------------------
define i32 @_Z8functionDv4_x.399.400(<4 x i64> %0, i64 %_reservedc_0) noread nowrite nofree {
%1:
  %2 = bitcast <4 x i64> %0 to <8 x i32>
  %3 = extractelement <8 x i32> %2, i32 0
  %4 = extractelement <4 x i64> %0, i32 1
  %5 = trunc i64 %4 to i32
  %6 = add i32 %3, %5
  %7 = extractelement <4 x i64> %0, i32 2
  %8 = trunc i64 %7 to i32
  %9 = add i32 %6, %8
  %10 = extractelement <4 x i64> %0, i32 3
  %11 = trunc i64 %10 to i32
  %12 = add i32 %9, %11
  ret i32 %12
}
=>
define i32 @_Z8functionDv4_x.399(<4 x i64> %0, i64 %_reservedc_0) noread nowrite nofree {
%1:
  %2 = bitcast <4 x i64> %0 to <8 x i32>
  %3 = extractelement <8 x i32> %2, i32 0
  %4 = trunc i64 %_reservedc_0 to i32
  %5 = add i32 %3, %4
  %6 = extractelement <4 x i64> %0, i32 2
  %7 = trunc i64 %6 to i32
  %8 = add i32 %5, %7
  %9 = extractelement <4 x i64> %0, i32 3
  %10 = trunc i64 %9 to i32
  %11 = add i32 %8, %10
  ret i32 %11
}
---------Sketches------------
(copy reservedconst)
-----------------------------

----------------------------------------
define i32 @_Z8functionDv4_x.401.402(<4 x i64> %0, i32 %_reservedc_0) noread nowrite nofree {
%1:
  %2 = bitcast <4 x i64> %0 to <8 x i32>
  %3 = extractelement <8 x i32> %2, i32 0
  %4 = extractelement <4 x i64> %0, i32 1
  %5 = trunc i64 %4 to i32
  %6 = add i32 %3, %5
  %7 = extractelement <4 x i64> %0, i32 2
  %8 = trunc i64 %7 to i32
  %9 = add i32 %6, %8
  %10 = extractelement <4 x i64> %0, i32 3
  %11 = trunc i64 %10 to i32
  %12 = add i32 %9, %11
  ret i32 %12
}
=>
define i32 @_Z8functionDv4_x.401(<4 x i64> %0, i32 %_reservedc_0) noread nowrite nofree {
%1:
  %2 = extractelement <4 x i64> %0, i32 1
  %3 = trunc i64 %2 to i32
  %4 = add i32 %_reservedc_0, %3
  %5 = extractelement <4 x i64> %0, i32 2
  %6 = trunc i64 %5 to i32
  %7 = add i32 %4, %6
  %8 = extractelement <4 x i64> %0, i32 3
  %9 = trunc i64 %8 to i32
  %10 = add i32 %7, %9
  ret i32 %10
}
---------Sketches------------
(copy reservedconst)
-----------------------------

----------------------------------------
define i32 @_Z8functionDv4_x.403.404(<4 x i64> %0, <8 x i32> %_reservedc_0) noread nowrite nofree {
%1:
  %2 = bitcast <4 x i64> %0 to <8 x i32>
  %3 = extractelement <8 x i32> %2, i32 0
  %4 = extractelement <4 x i64> %0, i32 1
  %5 = trunc i64 %4 to i32
  %6 = add i32 %3, %5
  %7 = extractelement <4 x i64> %0, i32 2
  %8 = trunc i64 %7 to i32
  %9 = add i32 %6, %8
  %10 = extractelement <4 x i64> %0, i32 3
  %11 = trunc i64 %10 to i32
  %12 = add i32 %9, %11
  ret i32 %12
}
=>
define i32 @_Z8functionDv4_x.403(<4 x i64> %0, <8 x i32> %_reservedc_0) noread nowrite nofree {
%1:
  %2 = extractelement <8 x i32> %_reservedc_0, i32 0
  %3 = extractelement <4 x i64> %0, i32 1
  %4 = trunc i64 %3 to i32
  %5 = add i32 %2, %4
  %6 = extractelement <4 x i64> %0, i32 2
  %7 = trunc i64 %6 to i32
  %8 = add i32 %5, %7
  %9 = extractelement <4 x i64> %0, i32 3
  %10 = trunc i64 %9 to i32
  %11 = add i32 %8, %10
  ret i32 %11
}
; ModuleID = 'function.ll'
source_filename = "function.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @_Z8functionDv4_x(<4 x i64> %0) local_unnamed_addr #0 {
  %2 = bitcast <4 x i64> %0 to <8 x i32>
  %3 = extractelement <8 x i32> %2, i32 0
  %4 = extractelement <4 x i64> %0, i32 1
  %5 = trunc i64 %4 to i32
  %6 = add i32 %3, %5
  %7 = extractelement <4 x i64> %0, i32 2
  %8 = trunc i64 %7 to i32
  %9 = add i32 %6, %8
  %10 = extractelement <4 x i64> %0, i32 3
  %11 = trunc i64 %10 to i32
  %12 = add i32 %9, %11
  ret i32 %12
}

attributes #0 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
